pipeline {
  triggers {
    pollSCM('H/1 * * * *')
  }

  agent {
    kubernetes {
      cloud 'imtech01-eks'
      yaml """
apiVersion: v1
kind: Pod
metadata:
  labels:
    app: jenkins-agent
spec:
  serviceAccountName: jenkins-admin

  imagePullSecrets:
    - name: ecr-pull-creds

  containers:
  - name: aws-cli
    image: amazon/aws-cli:2.11.0
    command:
      - cat
    tty: true

  - name: kubectl
    image: d3fk/kubectl:v1.30
    command:
      - cat
    tty: true

    
"""
    }
  }

  environment {
    AWS_REGION    = 'il-central-1'
    ECR_REGISTRY  = '314525640319.dkr.ecr.il-central-1.amazonaws.com'
    ECR_REPO      = 'lior/helm/frontend'
    IMAGE_TAG     = "${env.BUILD_NUMBER}"
    IMAGE_NAME    = "${ECR_REGISTRY}/${ECR_REPO}:${IMAGE_TAG}"
    CHART_DIR     = 'lior-nginx'
    RELEASE_NAME  = 'lior-nginx'
    NAMESPACE     = 'lior'
    HOST_INGRESS  = 'lior-ingress.aws.cts.care'
  }

  stages {
    stage('Checkout') {
      steps {
        checkout scm
      }
    }
    stage('kubectl version') {
      steps {
        container('kubectl') {
          sh 'kubectl version --client'
        }
      }
    }

    stage('Authenticate to ECR') {
      steps {
        container('aws-cli') {
          withCredentials([[
            $class: 'AmazonWebServicesCredentialsBinding',
            credentialsId: 'imtech'
          ]]) {
            script {
              env.ECR_PASSWORD = sh(
                script: "aws --region ${AWS_REGION} ecr get-login-password",
                returnStdout: true
              ).trim()
            }
          }
        }
        
      }
    }
    
  post {
    success {
      echo "✅ Deployment successful: ${IMAGE_NAME} deployed to ${NAMESPACE}."
      echo "Access the application at: http://${HOST_INGRESS}"
    }
    failure {
      echo "❌ Deployment failed. Please check the logs for details."
    }
  }

}
}
